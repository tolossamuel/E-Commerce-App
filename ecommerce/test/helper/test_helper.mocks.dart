// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i20;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce/core/failure/failure.dart' as _i7;
import 'package:ecommerce/core/network_checker/network_checker.dart' as _i10;
import 'package:ecommerce/feature/auth/data/data_source/auth_data_source.dart'
    as _i9;
import 'package:ecommerce/feature/auth/domain/entity/auth_entity.dart' as _i8;
import 'package:ecommerce/feature/auth/domain/repo/auth_repo.dart' as _i5;
import 'package:ecommerce/feature/cart/domain/entity/cart_entity.dart' as _i18;
import 'package:ecommerce/feature/cart/domain/repo/cart_repo.dart' as _i17;
import 'package:ecommerce/feature/home/data/datasource/home_data_source.dart'
    as _i16;
import 'package:ecommerce/feature/home/domain/entity/home_entity.dart' as _i13;
import 'package:ecommerce/feature/home/domain/repo/home_repo.dart' as _i12;
import 'package:hive/hive.dart' as _i14;
import 'package:http/http.dart' as _i4;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:shared_preferences/shared_preferences.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternetConnectionChecker_1 extends _i1.SmartFake
    implements _i3.InternetConnectionChecker {
  _FakeInternetConnectionChecker_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepo extends _i1.Mock implements _i5.AuthRepo {
  MockAuthRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>> login(
    String? userName,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            userName,
            password,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.AuthEntity>(
          this,
          Invocation.method(
            #login,
            [
              userName,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>> isLoggin() =>
      (super.noSuchMethod(
        Invocation.method(
          #isLoggin,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.AuthEntity>(
          this,
          Invocation.method(
            #isLoggin,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>);
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i9.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>> isLoggin() =>
      (super.noSuchMethod(
        Invocation.method(
          #isLoggin,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.AuthEntity>(
          this,
          Invocation.method(
            #isLoggin,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>> logIn(
    String? userName,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [
            userName,
            password,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.AuthEntity>(
          this,
          Invocation.method(
            #logIn,
            [
              userName,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.AuthEntity>>);

  @override
  _i6.Future<bool> getUserId(String? userName) => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [userName],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [NetworkInfoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfoImpl extends _i1.Mock implements _i10.NetworkInfoImpl {
  MockNetworkInfoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.InternetConnectionChecker get connectionChecker => (super.noSuchMethod(
        Invocation.getter(#connectionChecker),
        returnValue: _FakeInternetConnectionChecker_1(
          this,
          Invocation.getter(#connectionChecker),
        ),
      ) as _i3.InternetConnectionChecker);

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i11.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [HomeRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepo extends _i1.Mock implements _i12.HomeRepo {
  MockHomeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>> getAllProduct() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i13.HomeEntity>>(
          this,
          Invocation.method(
            #getAllProduct,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i13.HomeEntity>> getSingleProduct(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i13.HomeEntity>>.value(
            _FakeEither_0<_i7.Failure, _i13.HomeEntity>(
          this,
          Invocation.method(
            #getSingleProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i13.HomeEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>
      getProductByCatagory() => (super.noSuchMethod(
            Invocation.method(
              #getProductByCatagory,
              [],
            ),
            returnValue: _i6
                .Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i13.HomeEntity>>(
              this,
              Invocation.method(
                #getProductByCatagory,
                [],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>> getWishList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWishList,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i13.HomeEntity>>(
          this,
          Invocation.method(
            #getWishList,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, Set<int>>> getWishListId() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWishListId,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, Set<int>>>.value(
            _FakeEither_0<_i7.Failure, Set<int>>(
          this,
          Invocation.method(
            #getWishListId,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, Set<int>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> addToWishList(
          _i13.HomeEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToWishList,
          [product],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addToWishList,
            [product],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> removeFromWishList(
          int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromWishList,
          [productId],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #removeFromWishList,
            [productId],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i14.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i6.Stream<_i14.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i6.Stream<_i14.BoxEvent>.empty(),
      ) as _i6.Stream<_i14.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i6.Future<Iterable<int>>.value(<int>[]),
      ) as _i6.Future<Iterable<int>>);

  @override
  _i6.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [HomeDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeDataSource extends _i1.Mock implements _i16.HomeDataSource {
  MockHomeDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>> getAllProduct() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i13.HomeEntity>>(
          this,
          Invocation.method(
            #getAllProduct,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i13.HomeEntity>> getSingleProduct(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i13.HomeEntity>>.value(
            _FakeEither_0<_i7.Failure, _i13.HomeEntity>(
          this,
          Invocation.method(
            #getSingleProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i13.HomeEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>
      getProductByCatagory() => (super.noSuchMethod(
            Invocation.method(
              #getProductByCatagory,
              [],
            ),
            returnValue: _i6
                .Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i13.HomeEntity>>(
              this,
              Invocation.method(
                #getProductByCatagory,
                [],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>> getWishList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWishList,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i13.HomeEntity>>(
          this,
          Invocation.method(
            #getWishList,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i13.HomeEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, Set<int>>> getWishListId() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWishListId,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, Set<int>>>.value(
            _FakeEither_0<_i7.Failure, Set<int>>(
          this,
          Invocation.method(
            #getWishListId,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, Set<int>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> addToWishList(
          _i13.HomeEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToWishList,
          [product],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addToWishList,
            [product],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> removeFromWishList(
          int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromWishList,
          [productId],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #removeFromWishList,
            [productId],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);
}

/// A class which mocks [CartRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRepo extends _i1.Mock implements _i17.CartRepo {
  MockCartRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> addToCart(
          _i18.CartEntity? cartItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [cartItem],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addToCart,
            [cartItem],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> removeFromCart(int? itemId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [itemId],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #removeFromCart,
            [itemId],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i18.CartEntity>>> getCartItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCartItems,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i18.CartEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i18.CartEntity>>(
          this,
          Invocation.method(
            #getCartItems,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i18.CartEntity>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i20.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i20.Uint8List>.value(_i20.Uint8List(0)),
      ) as _i6.Future<_i20.Uint8List>);

  @override
  _i6.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i4.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
