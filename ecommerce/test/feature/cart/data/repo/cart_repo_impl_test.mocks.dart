// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce/test/feature/cart/data/repo/cart_repo_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce/core/failure/failure.dart' as _i6;
import 'package:ecommerce/core/network_checker/network_checker.dart' as _i3;
import 'package:ecommerce/feature/cart/data/datasource/cart_local_data_source.dart'
    as _i8;
import 'package:ecommerce/feature/cart/data/datasource/cart_remote_data_source.dart'
    as _i5;
import 'package:ecommerce/feature/cart/domain/entity/cart_entity.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [CartRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRemoteDataSource extends _i1.Mock
    implements _i5.CartRemoteDataSource {
  MockCartRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, bool>> addToCart(
          List<Map<String, int>>? cartItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [cartItem],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #addToCart,
            [cartItem],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, bool>> removeFromCart(int? itemId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [itemId],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #removeFromCart,
            [itemId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, List<_i7.CartEntity>>> getCartItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCartItems,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.Failure, List<_i7.CartEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.CartEntity>>(
          this,
          Invocation.method(
            #getCartItems,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, List<_i7.CartEntity>>>);
}

/// A class which mocks [CartLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartLocalDataSource extends _i1.Mock
    implements _i8.CartLocalDataSource {
  MockCartLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, bool>> addToCart(
          List<Map<String, int>>? cartProducts) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [cartProducts],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #addToCart,
            [cartProducts],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, bool>> removeFromCart(int? itemId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [itemId],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #removeFromCart,
            [itemId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, List<_i7.CartEntity>>> getCartItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCartItems,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.Failure, List<_i7.CartEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.CartEntity>>(
          this,
          Invocation.method(
            #getCartItems,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, List<_i7.CartEntity>>>);

  @override
  _i4.Future<double> getTotalPrice() => (super.noSuchMethod(
        Invocation.method(
          #getTotalPrice,
          [],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);
}
